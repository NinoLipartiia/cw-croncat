{
  "contract_name": "croncat-factory",
  "contract_version": "0.1.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "owner_addr": {
        "description": "Owner address of the contract Only owner can execute messages in this contract If no owner_addr is passed sender will be used as owner address",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Updates the factory config",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "owner_addr"
            ],
            "properties": {
              "owner_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Deploys contract and saves metadata of the contract to the factory",
        "type": "object",
        "required": [
          "deploy"
        ],
        "properties": {
          "deploy": {
            "type": "object",
            "required": [
              "kind",
              "module_instantiate_info"
            ],
            "properties": {
              "kind": {
                "$ref": "#/definitions/VersionKind"
              },
              "module_instantiate_info": {
                "$ref": "#/definitions/ModuleInstantiateInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Removes contract metadata from the factory if contract is paused or it is library contract. Last version of the contract can't get removed",
        "type": "object",
        "required": [
          "remove"
        ],
        "properties": {
          "remove": {
            "type": "object",
            "required": [
              "contract_name",
              "version"
            ],
            "properties": {
              "contract_name": {
                "type": "string"
              },
              "version": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update fields of the contract metadata",
        "type": "object",
        "required": [
          "update_metadata"
        ],
        "properties": {
          "update_metadata": {
            "type": "object",
            "required": [
              "contract_name",
              "version"
            ],
            "properties": {
              "changelog_url": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "contract_name": {
                "type": "string"
              },
              "schema": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "version": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "proxy"
        ],
        "properties": {
          "proxy": {
            "type": "object",
            "required": [
              "msg"
            ],
            "properties": {
              "msg": {
                "$ref": "#/definitions/WasmMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "ModuleInstantiateInfo": {
        "description": "Information needed to instantiate a module.",
        "type": "object",
        "required": [
          "checksum",
          "code_id",
          "commit_id",
          "contract_name",
          "msg",
          "version"
        ],
        "properties": {
          "changelog_url": {
            "description": "public link to a README about this version",
            "type": [
              "string",
              "null"
            ]
          },
          "checksum": {
            "description": "proof of deployed code",
            "type": "string"
          },
          "code_id": {
            "description": "Code ID of the contract to be instantiated.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "commit_id": {
            "description": "git commit hash",
            "type": "string"
          },
          "contract_name": {
            "description": "Contract name for the instantiated contract.",
            "type": "string"
          },
          "msg": {
            "description": "Instantiate message to be used to create the contract.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "schema": {
            "description": "types/schema - helps keep UI/clients backward compatible",
            "type": [
              "string",
              "null"
            ]
          },
          "version": {
            "description": "Truncated semver so contracts could programmatically check backward compat",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 2,
            "minItems": 2
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VersionKind": {
        "type": "string",
        "enum": [
          "library",
          "manager",
          "tasks",
          "agents"
        ]
      },
      "WasmMsg": {
        "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
        "oneOf": [
          {
            "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "funds",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "msg": {
                    "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "instantiate"
            ],
            "properties": {
              "instantiate": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readbale label for the contract",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "migrate"
            ],
            "properties": {
              "migrate": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg",
                  "new_code_id"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "new_code_id": {
                    "description": "the code_id of the new logic to place in the given contract",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "update_admin"
            ],
            "properties": {
              "update_admin": {
                "type": "object",
                "required": [
                  "admin",
                  "contract_addr"
                ],
                "properties": {
                  "admin": {
                    "type": "string"
                  },
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "clear_admin"
            ],
            "properties": {
              "clear_admin": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Gets the factory's config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets latest contract names and metadatas of the contracts",
        "type": "object",
        "required": [
          "latest_contracts"
        ],
        "properties": {
          "latest_contracts": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets latest version metadata of the contract",
        "type": "object",
        "required": [
          "latest_contract"
        ],
        "properties": {
          "latest_contract": {
            "type": "object",
            "required": [
              "contract_name"
            ],
            "properties": {
              "contract_name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets metadatas of the contract",
        "type": "object",
        "required": [
          "versions_by_contract_name"
        ],
        "properties": {
          "versions_by_contract_name": {
            "type": "object",
            "required": [
              "contract_name"
            ],
            "properties": {
              "contract_name": {
                "type": "string"
              },
              "from_index": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets list of the contract names",
        "type": "object",
        "required": [
          "contract_names"
        ],
        "properties": {
          "contract_names": {
            "type": "object",
            "properties": {
              "from_index": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets all contract names and metadatas stored in factory.",
        "type": "object",
        "required": [
          "all_entries"
        ],
        "properties": {
          "all_entries": {
            "type": "object",
            "properties": {
              "from_index": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_entries": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_EntryResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EntryResponse"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "ContractMetadataInfo": {
          "type": "object",
          "required": [
            "checksum",
            "code_id",
            "commit_id",
            "contract_addr",
            "kind",
            "version"
          ],
          "properties": {
            "changelog_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "checksum": {
              "type": "string"
            },
            "code_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "commit_id": {
              "type": "string"
            },
            "contract_addr": {
              "$ref": "#/definitions/Addr"
            },
            "kind": {
              "$ref": "#/definitions/VersionKind"
            },
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "version": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        "EntryResponse": {
          "type": "object",
          "required": [
            "contract_name",
            "metadata"
          ],
          "properties": {
            "contract_name": {
              "type": "string"
            },
            "metadata": {
              "$ref": "#/definitions/ContractMetadataInfo"
            }
          },
          "additionalProperties": false
        },
        "VersionKind": {
          "type": "string",
          "enum": [
            "library",
            "manager",
            "tasks",
            "agents"
          ]
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "owner_addr"
      ],
      "properties": {
        "owner_addr": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "contract_names": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_String",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "latest_contract": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractMetadataResponse",
      "type": "object",
      "properties": {
        "metadata": {
          "anyOf": [
            {
              "$ref": "#/definitions/ContractMetadataInfo"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "ContractMetadataInfo": {
          "type": "object",
          "required": [
            "checksum",
            "code_id",
            "commit_id",
            "contract_addr",
            "kind",
            "version"
          ],
          "properties": {
            "changelog_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "checksum": {
              "type": "string"
            },
            "code_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "commit_id": {
              "type": "string"
            },
            "contract_addr": {
              "$ref": "#/definitions/Addr"
            },
            "kind": {
              "$ref": "#/definitions/VersionKind"
            },
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "version": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        "VersionKind": {
          "type": "string",
          "enum": [
            "library",
            "manager",
            "tasks",
            "agents"
          ]
        }
      }
    },
    "latest_contracts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_EntryResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EntryResponse"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "ContractMetadataInfo": {
          "type": "object",
          "required": [
            "checksum",
            "code_id",
            "commit_id",
            "contract_addr",
            "kind",
            "version"
          ],
          "properties": {
            "changelog_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "checksum": {
              "type": "string"
            },
            "code_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "commit_id": {
              "type": "string"
            },
            "contract_addr": {
              "$ref": "#/definitions/Addr"
            },
            "kind": {
              "$ref": "#/definitions/VersionKind"
            },
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "version": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        "EntryResponse": {
          "type": "object",
          "required": [
            "contract_name",
            "metadata"
          ],
          "properties": {
            "contract_name": {
              "type": "string"
            },
            "metadata": {
              "$ref": "#/definitions/ContractMetadataInfo"
            }
          },
          "additionalProperties": false
        },
        "VersionKind": {
          "type": "string",
          "enum": [
            "library",
            "manager",
            "tasks",
            "agents"
          ]
        }
      }
    },
    "versions_by_contract_name": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_ContractMetadataInfo",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContractMetadataInfo"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "ContractMetadataInfo": {
          "type": "object",
          "required": [
            "checksum",
            "code_id",
            "commit_id",
            "contract_addr",
            "kind",
            "version"
          ],
          "properties": {
            "changelog_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "checksum": {
              "type": "string"
            },
            "code_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "commit_id": {
              "type": "string"
            },
            "contract_addr": {
              "$ref": "#/definitions/Addr"
            },
            "kind": {
              "$ref": "#/definitions/VersionKind"
            },
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "version": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        "VersionKind": {
          "type": "string",
          "enum": [
            "library",
            "manager",
            "tasks",
            "agents"
          ]
        }
      }
    }
  }
}
