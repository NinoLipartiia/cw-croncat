{
  "contract_name": "croncat-manager",
  "contract_version": "0.1.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "croncat_agents_key",
      "croncat_tasks_key",
      "denom"
    ],
    "properties": {
      "croncat_agents_key": {
        "description": "Name of the key for raw querying Agents address from the factory",
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 2,
            "minItems": 2
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "croncat_tasks_key": {
        "description": "Name of the key for raw querying Tasks address from the factory",
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 2,
            "minItems": 2
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "cw20_whitelist": {
        "description": "List of whitelisted cw20s",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "string"
        }
      },
      "denom": {
        "description": "The native denominator of current chain",
        "type": "string"
      },
      "gas_price": {
        "description": "Gas prices that expected to be used by the agent",
        "anyOf": [
          {
            "$ref": "#/definitions/GasPrice"
          },
          {
            "type": "null"
          }
        ]
      },
      "owner_addr": {
        "description": "Address of the contract owner, defaults to the sender",
        "type": [
          "string",
          "null"
        ]
      },
      "treasury_addr": {
        "description": "Contract's treasury. Fees from tasks will go to this address, if set or to the owner address otherwise",
        "type": [
          "string",
          "null"
        ]
      },
      "version": {
        "description": "CW2 Version provided by factory",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "GasPrice": {
        "description": "We can't store gas_price as floats inside cosmwasm so instead of having 0.04 we use GasPrice {4/100} and after that multiply Gas by `gas_adjustment` {150/100} (1.5)",
        "type": "object",
        "required": [
          "denominator",
          "gas_adjustment_numerator",
          "numerator"
        ],
        "properties": {
          "denominator": {
            "description": "Denominator is shared",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gas_adjustment_numerator": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "numerator": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Updates the croncat Config. Note: it's shared across contracts",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "$ref": "#/definitions/UpdateConfig"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Execute current task in the queue or task with queries if task_hash given",
        "type": "object",
        "required": [
          "proxy_call"
        ],
        "properties": {
          "proxy_call": {
            "type": "object",
            "properties": {
              "task_hash": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Receive native coins to include them to the task",
        "type": "object",
        "required": [
          "refill_task_balance"
        ],
        "properties": {
          "refill_task_balance": {
            "type": "object",
            "required": [
              "task_hash"
            ],
            "properties": {
              "task_hash": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "refill_task_cw20_balance"
        ],
        "properties": {
          "refill_task_cw20_balance": {
            "type": "object",
            "required": [
              "cw20",
              "task_hash"
            ],
            "properties": {
              "cw20": {
                "$ref": "#/definitions/Cw20Coin"
              },
              "task_hash": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Receive cw20 coin",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Create task's balance, called by the tasks contract",
        "type": "object",
        "required": [
          "create_task_balance"
        ],
        "properties": {
          "create_task_balance": {
            "$ref": "#/definitions/ManagerCreateTaskBalance"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove task's balance, called by the tasks contract",
        "type": "object",
        "required": [
          "remove_task"
        ],
        "properties": {
          "remove_task": {
            "$ref": "#/definitions/ManagerRemoveTask"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Move balances from the manager to the owner address, or treasury_addr if set",
        "type": "object",
        "required": [
          "owner_withdraw"
        ],
        "properties": {
          "owner_withdraw": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw temp coins for users",
        "type": "object",
        "required": [
          "user_withdraw"
        ],
        "properties": {
          "user_withdraw": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw agent rewards on agent removal, this should be called only by agent contract",
        "type": "object",
        "required": [
          "agent_withdraw"
        ],
        "properties": {
          "agent_withdraw": {
            "anyOf": [
              {
                "$ref": "#/definitions/AgentWithdrawOnRemovalArgs"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AgentWithdrawOnRemovalArgs": {
        "type": "object",
        "required": [
          "agent_id",
          "payable_account_id"
        ],
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "payable_account_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AmountForOneTask": {
        "type": "object",
        "required": [
          "coin",
          "gas"
        ],
        "properties": {
          "coin": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "maxItems": 2,
            "minItems": 2
          },
          "cw20": {
            "anyOf": [
              {
                "$ref": "#/definitions/Cw20CoinVerified"
              },
              {
                "type": "null"
              }
            ]
          },
          "gas": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw20Coin": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Cw20CoinVerified": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GasPrice": {
        "description": "We can't store gas_price as floats inside cosmwasm so instead of having 0.04 we use GasPrice {4/100} and after that multiply Gas by `gas_adjustment` {150/100} (1.5)",
        "type": "object",
        "required": [
          "denominator",
          "gas_adjustment_numerator",
          "numerator"
        ],
        "properties": {
          "denominator": {
            "description": "Denominator is shared",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gas_adjustment_numerator": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "numerator": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "ManagerCreateTaskBalance": {
        "type": "object",
        "required": [
          "amount_for_one_task",
          "recurring",
          "sender",
          "task_hash"
        ],
        "properties": {
          "amount_for_one_task": {
            "$ref": "#/definitions/AmountForOneTask"
          },
          "cw20": {
            "anyOf": [
              {
                "$ref": "#/definitions/Cw20CoinVerified"
              },
              {
                "type": "null"
              }
            ]
          },
          "recurring": {
            "type": "boolean"
          },
          "sender": {
            "$ref": "#/definitions/Addr"
          },
          "task_hash": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        },
        "additionalProperties": false
      },
      "ManagerRemoveTask": {
        "type": "object",
        "required": [
          "sender",
          "task_hash"
        ],
        "properties": {
          "sender": {
            "$ref": "#/definitions/Addr"
          },
          "task_hash": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UpdateConfig": {
        "type": "object",
        "properties": {
          "agent_fee": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "croncat_agents_key": {
            "type": [
              "array",
              "null"
            ],
            "items": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "maxItems": 2,
                "minItems": 2
              }
            ],
            "maxItems": 2,
            "minItems": 2
          },
          "croncat_tasks_key": {
            "type": [
              "array",
              "null"
            ],
            "items": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "maxItems": 2,
                "minItems": 2
              }
            ],
            "maxItems": 2,
            "minItems": 2
          },
          "cw20_whitelist": {
            "description": "Add supported cw20s That's seems unfair to undo support of cw20's after user already created a task with it",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "gas_price": {
            "anyOf": [
              {
                "$ref": "#/definitions/GasPrice"
              },
              {
                "type": "null"
              }
            ]
          },
          "owner_addr": {
            "type": [
              "string",
              "null"
            ]
          },
          "paused": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "treasury_addr": {
            "type": [
              "string",
              "null"
            ]
          },
          "treasury_fee": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Gets current croncat config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets manager available balances",
        "type": "object",
        "required": [
          "treasury_balance"
        ],
        "properties": {
          "treasury_balance": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets Cw20 balances of the given wallet address",
        "type": "object",
        "required": [
          "users_balances"
        ],
        "properties": {
          "users_balances": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "from_index": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get task balance",
        "type": "object",
        "required": [
          "task_balance"
        ],
        "properties": {
          "task_balance": {
            "type": "object",
            "required": [
              "task_hash"
            ],
            "properties": {
              "task_hash": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "agent_rewards"
        ],
        "properties": {
          "agent_rewards": {
            "type": "object",
            "required": [
              "agent_id"
            ],
            "properties": {
              "agent_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "agent_rewards": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "agent_fee",
        "croncat_agents_key",
        "croncat_factory_addr",
        "croncat_tasks_key",
        "cw20_whitelist",
        "gas_price",
        "limit",
        "native_denom",
        "owner_addr",
        "paused",
        "treasury_fee"
      ],
      "properties": {
        "agent_fee": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "croncat_agents_key": {
          "description": "Key to query address of the agents",
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 2,
              "minItems": 2
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "croncat_factory_addr": {
          "description": "Address of the croncat_factory",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "croncat_tasks_key": {
          "description": "Key to query address of the tasks",
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 2,
              "minItems": 2
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "cw20_whitelist": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        },
        "gas_price": {
          "$ref": "#/definitions/GasPrice"
        },
        "limit": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "native_denom": {
          "type": "string"
        },
        "owner_addr": {
          "$ref": "#/definitions/Addr"
        },
        "paused": {
          "type": "boolean"
        },
        "treasury_addr": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "treasury_fee": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "GasPrice": {
          "description": "We can't store gas_price as floats inside cosmwasm so instead of having 0.04 we use GasPrice {4/100} and after that multiply Gas by `gas_adjustment` {150/100} (1.5)",
          "type": "object",
          "required": [
            "denominator",
            "gas_adjustment_numerator",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "description": "Denominator is shared",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "gas_adjustment_numerator": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "numerator": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "task_balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TaskBalanceResponse",
      "type": "object",
      "properties": {
        "balance": {
          "anyOf": [
            {
              "$ref": "#/definitions/TaskBalance"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "TaskBalance": {
          "type": "object",
          "required": [
            "native_balance"
          ],
          "properties": {
            "cw20_balance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Cw20CoinVerified"
                },
                {
                  "type": "null"
                }
              ]
            },
            "ibc_balance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            },
            "native_balance": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "treasury_balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "users_balances": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Cw20CoinVerified",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Cw20CoinVerified"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
